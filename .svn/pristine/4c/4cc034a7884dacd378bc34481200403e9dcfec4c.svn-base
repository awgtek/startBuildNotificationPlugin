package ru.lanit.bamboo.plugins;

import com.atlassian.bamboo.build.CustomPreBuildAction;
import com.atlassian.bamboo.chains.ChainExecution;
import com.atlassian.bamboo.notification.*;
import com.atlassian.bamboo.plan.Plan;
import com.atlassian.bamboo.plan.PlanManager;
import com.atlassian.bamboo.utils.error.ErrorCollection;
import com.atlassian.bamboo.v2.build.BuildContext;
import com.atlassian.bamboo.ww2.actions.build.admin.create.BuildConfiguration;
import com.atlassian.sal.api.transaction.TransactionCallback;
import com.atlassian.sal.api.transaction.TransactionTemplate;
import com.atlassian.bamboo.chains.ChainExecutionManager;
import org.jetbrains.annotations.NotNull;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.*;

/**
 * User: Tishenko
 * Datetime: 28.01.13 14:52
 */
public class StartBuildAction implements CustomPreBuildAction {
/*    private final static String PLAN_MANAGER = "planManager";
    private final static String NOTIFICATION_MANAGER = "notificationManager";
    private final static String NOTIFICATION_DISPATCHER = "notificationDispatcher";*/

    private final static String START_DATETIME_FORMAT = "yyyy/MM/dd HH:mm:ss";

    private final static String NOTIF_BUILD = "build";
    private final static String NOTIF_BUILD_NUMBER = "buildNumber";
    private final static String NOTIF_BUILD_KEY = "buildKey";
    private final static String NOTIF_START_DATETIME = "startDateTime";
    private final static String NOTIF_TRIGGER_REASON = "triggerReasonDescription";
    private final static String NOTIF_STATUS_MESSAGE = "statusMessage";
    private final static String MESS_BUILD_STARTED = "Build started";

    private BuildContext buildContext;
    private Plan plan;

    private NotificationManager notificationManager;
    private NotificationDispatcher notificationDispatcher;

    private StartBuildNotification notification;

    private TransactionTemplate transactionTemplate;

    private PlanManager planManager;
    private ChainExecutionManager chainManager;

    public void init(@NotNull final BuildContext buildContext) {
        System.out.println("---------- START ACTION ----------");

        this.buildContext = buildContext;
        final Long planId = buildContext.getPlanId();

        System.out.println("--- TransactionTemplate: " + transactionTemplate);

        transactionTemplate.execute(new TransactionCallback<Object>() {
            public Object doInTransaction() {
                System.out.println("--- doInTransaction --- ");

                System.out.println("--- Notification Manager: " + notificationManager);
                System.out.println("--- Notification Dispatcher: " + notificationDispatcher);

                System.out.println("--- Plan Manager: " + planManager);
                plan = planManager.getPlanById(planId);

                System.out.println("--- Plan: " + plan);
                System.out.println("--- Plan.name: " + plan.getName());
                System.out.println("--- Plan.buildKey: " + plan.getBuildKey());

                /*System.out.println("--- Chain Manager: " + chainManager);
                List<ChainExecution> chainExecutions = chainManager.getExecutingChains(plan.getPlanKey());
                System.out.println("--- Chain Executions: " + chainExecutions);
                for (ChainExecution chainExecution: chainExecutions) {
                    System.out.println("---    " + chainExecution);
                }*/

                HashSet<NotificationRecipient> recipients = new HashSet<NotificationRecipient>();

                Set<NotificationRule> rules = notificationManager.getNotificationRules(plan);
                System.out.println("--- Rules: " + rules);
                for (NotificationRule rule : rules) {
                    NotificationType notificationType = rule.getNotificationType();
                    if (notificationType instanceof StartBuildNotificationType) {
                        NotificationRecipient recipient = rule.getNotificationRecipient();
                        recipients.add(recipient);
                    }
                }

                if (recipients.size() > 0) {
                    System.out.println("--- Prepare notification ---");
                    notification = new StartBuildNotification();
                    notification.setContext(prepeareNotificationContext());
                    notification.setNotificationRecipients(recipients);
                    notificationDispatcher.dispatchNotifications(notification);
                }

                return null;
            }
        });

        System.out.println("---------- END ACTION ----------");
    }

    private Map<String, Object> prepeareNotificationContext() {
        DateFormat dateFormat = new SimpleDateFormat(START_DATETIME_FORMAT);
        Date date = new Date();

        Map<String, Object> context = new HashMap<String, Object>();

        context.put(NOTIF_BUILD, plan);
        context.put(NOTIF_BUILD_NUMBER, buildContext.getBuildNumber());
        context.put(NOTIF_BUILD_KEY, buildContext.getBuildResultKey());
        context.put(NOTIF_START_DATETIME, dateFormat.format(date));
        context.put(NOTIF_TRIGGER_REASON, buildContext.getTriggerReason().getNameForSentence());
        context.put(NOTIF_STATUS_MESSAGE, MESS_BUILD_STARTED);

        return context;
    }

    public ErrorCollection validate(BuildConfiguration buildConfiguration) {
        return null;
    }

    @NotNull
    public BuildContext call() throws InterruptedException, Exception {
        return this.buildContext;
    }

    public NotificationManager getNotificationManager() {
        return notificationManager;
    }

    public void setNotificationManager(NotificationManager notificationManager) {
        this.notificationManager = notificationManager;
    }

    public NotificationDispatcher getNotificationDispatcher() {
        return notificationDispatcher;
    }

    public void setNotificationDispatcher(NotificationDispatcher notificationDispatcher) {
        this.notificationDispatcher = notificationDispatcher;
    }

    public PlanManager getPlanManager() {
        return planManager;
    }

    public void setPlanManager(PlanManager planManager) {
        this.planManager = planManager;
    }

    public ChainExecutionManager getChainManager() {
        return chainManager;
    }

    public void setChainManager(ChainExecutionManager chainManager) {
        this.chainManager = chainManager;
    }

    public TransactionTemplate getTransactionTemplate() {
        return transactionTemplate;
    }

    public void setTransactionTemplate(TransactionTemplate transactionTemplate) {
        this.transactionTemplate = transactionTemplate;
    }
}
